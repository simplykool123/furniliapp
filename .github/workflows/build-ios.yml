name: Build iOS App

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'

    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          ios/Pods
          ~/Library/Caches/CocoaPods
        key: ${{ runner.os }}-pods-${{ hashFiles('ios/App/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Install dependencies
      run: npm ci

    - name: Build web application
      run: npm run build

    - name: Sync Capacitor
      run: npx cap sync ios

    - name: Install CocoaPods
      run: |
        cd ios/App
        pod install

    # Simulator Build (always runs for testing)
    - name: Build iOS App for Simulator
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Debug \
                   -sdk iphonesimulator \
                   -destination 'platform=iOS Simulator,name=iPhone 15' \
                   clean build

    - name: Create Simulator App Bundle
      run: |
        cd ios/App/build/Debug-iphonesimulator
        zip -r furnili-management-ios-simulator.zip App.app

    - name: Upload iOS Simulator App
      uses: actions/upload-artifact@v4
      with:
        name: furnili-management-ios-simulator
        path: ios/App/build/Debug-iphonesimulator/furnili-management-ios-simulator.zip

    # Device Build (only with certificates)
    - name: Check for certificates
      id: check_certs
      run: |
        if [ -n "${{ secrets.IOS_CERTIFICATE_BASE64 }}" ] && [ -n "${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}" ]; then
          echo "has_certs=true" >> $GITHUB_OUTPUT
        else
          echo "has_certs=false" >> $GITHUB_OUTPUT
        fi

    - name: Install certificates and provisioning profile
      if: steps.check_certs.outputs.has_certs == 'true'
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Build iOS Device App
      if: steps.check_certs.outputs.has_certs == 'true'
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Release \
                   -destination "generic/platform=iOS" \
                   -archivePath App.xcarchive \
                   archive

    - name: Export IPA
      if: steps.check_certs.outputs.has_certs == 'true'
      run: |
        cd ios/App
        xcodebuild -exportArchive \
                   -archivePath App.xcarchive \
                   -exportPath export \
                   -exportOptionsPlist ../../ExportOptions.plist

    - name: Upload IPA
      if: steps.check_certs.outputs.has_certs == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: furnili-management-ios-ipa
        path: ios/App/export/*.ipa

    - name: Clean up keychain and provisioning profile
      if: steps.check_certs.outputs.has_certs == 'true' && always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true